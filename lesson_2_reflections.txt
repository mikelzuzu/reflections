What happens when you initialize a repository? Why do you need to do it?
to create new .git file

How is the staging area different from the working directory and the repository? What value do you think it offers?
staging area is waiting to commit to git.

How can you use the staging area to make sure you have one commit per logical change?
You can check with git status how many files are to commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
You can use for unofficial release, make changes in language, etc.
When you are fixing bug or creating a new feature
You can have master branch where never breaks
developer branch

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
if we finish the feature and put it in the master branch

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
We don’t know if both files change same piece of code which one is going to be respect





Checking out the coins branch

If you haven't already checked out the coins branch, you'll need to do so now with the command git checkout coins before you'll be able to refer to it. Once you've done that, decide whether you should keep it checked out or check out a different branch before completing the merge.

A note about git merge

git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Merge conflict

If you get a message like this

Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.
then your files were not in the same state as Caroline's when you started the merge. To fix this, complete the following steps:

Restore your files to their state before you started the merge by running git merge --abort
Double check the state of your files. If you run git log while the master branch is checked out, you should see Caroline's "Add color" commit as the second-most-recent, and the most recent should be your commit fixing the bullet bug. If you use git diff to compare your commit to Caroline's, your commit should introduce the line this.delayBeforeBullet = 10; on line 424. The line should be indented to the same level as the line below it using only spaces (no tabs), and the line should have no spaces after it.
Once your file is in the correct state, create a new commit with your changes.
Try the merge again.
Comparing a commit to its parent

The command Caroline mentions to compare a commit to its parent is git show commit_id